import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Constants
mu_0 = 4 * np.pi * 1e-7  # Permeability of free space (H/m)

# Magnet parameters
length = 0.05  # Length along x-axis (m)
width = 0.02  # Width along y-axis (m)
height = 0.01  # Height along z-axis (m)
Ms = 1.4e6  # Magnetization magnitude along z-axis (A/m)

# Observation point for 1D parametric study
obs_point = np.array([0.02, 0.005, 0.0015])  # Observation point coordinates (x, y, z) in meters

# Translation range for 1D parametric study
x_t_values = np.linspace(-0.05, 0.05, 500)  # Magnet translation along x-axis, 500 points (m)

# Grid for 3D surface plots (x-z plane at fixed y)
x_grid = np.linspace(-0.05, 0.05, 50)  # x-coordinates for surface plots
z_grid = np.linspace(0.0005, 0.01, 50)  # z-coordinates for surface plots (start just above magnet surface)
y_fixed = 0.005  # Fixed y-coordinate (m)
X, Z = np.meshgrid(x_grid, z_grid)  # Create 2D grid for surface plots

def F(x, y, z, xm, y1, y2, zk):  # Auxiliary function for Bx calculation
    """Calculate F function for Bx."""
    num = (y - y1) + np.sqrt((x - xm)**2 + (y - y1)**2 + (z - zk)**2)
    denom = (y - y2) + np.sqrt((x - xm)**2 + (y - y2)**2 + (z - zk)**2)
    return num / denom if denom != 0 else 1e-10

def H(x, y, z, x1, x2, ym, zk):  # Auxiliary function for By calculation
    """Calculate H function for By."""
    num = (x - x1) + np.sqrt((x - x1)**2 + (y - ym)**2 + (z - zk)**2)
    denom = (x - x2) + np.sqrt((x - x2)**2 + (y - ym)**2 + (z - zk)**2)
    return num / denom if denom != 0 else 1e-10

def G(x, y, z, xn, ym, zk):  # Inverse distance for Bz calculation
    """Calculate G function for Bz."""
    denom = np.sqrt((x - xn)**2 + (y - ym)**2 + (z - zk)**2)
    return 1 / denom if denom != 0 else 1e-10

def compute_Bx(x, y, z, x1, x2, y1, y2, z1, z2):  # Computes x-component of magnetic field
    """Calculate Bx component."""
    Bx = 0
    x_m = [x1, x2]
    z_k = [z1, z2]
    for k in range(2):
        for m in range(2):
            sign = (-1)**(k + m + 2)
            Bx += sign * np.log(F(x, y, z, x_m[m], y1, y2, z_k[k]))
    return (mu_0 * Ms / (4 * np.pi)) * Bx

def compute_By(x, y, z, x1, x2, y1, y2, z1, z2):  # Computes y-component of magnetic field
    """Calculate By component."""
    By = 0
    y_m = [y1, y2]
    z_k = [z1, z2]
    for k in range(2):
        for m in range(2):
            sign = (-1)**(k + m + 2)
            By += sign * np.log(H(x, y, z, x1, x2, y_m[m], z_k[k]))
    return (mu_0 * Ms / (4 * np.pi)) * By

def compute_Bz(x, y, z, x1, x2, y1, y2, z1, z2):  # Computes z-component of magnetic field
    """Calculate Bz component."""
    Bz = 0
    x_n = [x1, x2]
    y_m = [y1, y2]
    z_k = [z1, z2]
    for k in range(2):
        for n in range(2):
            for m in range(2):
                sign = (-1)**(k + n + m + 3)
                term = ((x - x_n[n]) * (y - y_m[m]) / (z - z_k[k])) * G(x, y, z, x_n[n], y_m[m], z_k[k]) if (z - z_k[k]) != 0 else 0
                Bz += sign * np.arctan(term)
    return (mu_0 * Ms / (4 * np.pi)) * Bz

def compute_magnetic_field(obs_point, x1, x2, y1, y2, z1, z2):  # Computes magnetic field vector
    """Compute Bx, By, Bz at observation point."""
    x, y, z = obs_point
    Bx = compute_Bx(x, y, z, x1, x2, y1, y2, z1, z2)
    By = compute_By(x, y, z, x1, x2, y1, y2, z1, z2)
    Bz = compute_Bz(x, y, z, x1, x2, y1, y2, z1, z2)
    return np.array([Bx, By, Bz])

# Parametric study (1D along x_t)
Bx_values = []
By_values = []
Bz_values = []
B_magnitudes = []
print_step = 50
print(f"{'x_t (m)':>12} {'Bx (T)':>12} {'By (T)':>12} {'Bz (T)':>12} {'|B| (T)':>12}")
print("-" * 60)
for i, x_t in enumerate(x_t_values):
    x1 = x_t - length/2
    x2 = x_t + length/2
    y1 = -width/2
    y2 = width/2
    z1 = -height/2
    z2 = height/2
    
    B = compute_magnetic_field(obs_point, x1, x2, y1, y2, z1, z2)
    Bx_values.append(B[0])
    By_values.append(B[1])
    Bz_values.append(B[2])
    B_magnitude = np.sqrt(np.sum(B**2))
    B_magnitudes.append(B_magnitude)
    
    if i % print_step == 0:
        print(f"{x_t:>12.6f} {B[0]:>12.6e} {B[1]:>12.6e} {B[2]:>12.6e} {B_magnitude:>12.6e}")

# Find optimized position (maximum |B|)
max_idx = np.argmax(B_magnitudes)
optimal_x_t = x_t_values[max_idx]
optimal_B = B_magnitudes[max_idx]

print("-" * 60)
print(f"Optimal x_t: {optimal_x_t:.4f} m")
print(f"Maximum |B|: {optimal_B:.6e} T at observation point {obs_point}")

# Compute magnetic field for 3D surface plots (x-z plane at fixed y)
x_t_fixed = 0.0
x1 = x_t_fixed - length/2
x2 = x_t_fixed + length/2
y1 = -width/2
y2 = width/2
z1 = -height/2
z2 = height/2
B_magnitude_grid = np.zeros_like(X)
Bz_grid = np.zeros_like(X)
for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        obs_point_3d = np.array([X[i, j], y_fixed, Z[i, j]])
        B = compute_magnetic_field(obs_point_3d, x1, x2, y1, y2, z1, z2)
        B_magnitude_grid[i, j] = np.sqrt(np.sum(B**2))
        Bz_grid[i, j] = B[2]

# Visualization: 1D parametric study
plt.figure(figsize=(12, 8))
plt.plot(x_t_values, Bx_values, label='Bx (T)')
plt.plot(x_t_values, By_values, label='By (T)')
plt.plot(x_t_values, Bz_values, label='Bz (T)')
plt.plot(x_t_values, B_magnitudes, label='|B| (T)', linewidth=2)
plt.scatter(optimal_x_t, optimal_B, color='red', label=f'Optimal (x_t={optimal_x_t:.8f} m)')
plt.xlabel('Translation x_t (m)')
plt.ylabel('Magnetic Field (T)')
plt.title('Magnetic Field Components vs. Magnet Translation')
plt.grid(True)
plt.legend()
plt.show()

# Visualization: 3D surface plots of |B| and Bz
fig = plt.figure(figsize=(15, 6))

# Surface plot for |B|
ax1 = fig.add_subplot(121, projection='3d')
surf1 = ax1.plot_surface(X, Z, B_magnitude_grid, cmap='viridis')
ax1.set_xlabel('X (m)')
ax1.set_ylabel('Z (m)')
ax1.set_zlabel('|B| (T)')
ax1.set_title('Magnetic Field Magnitude |B| in X-Z Plane (y = 0.005 m)')
fig.colorbar(surf1, ax=ax1, label='|B| (T)')

# Surface plot for Bz
ax2 = fig.add_subplot(122, projection='3d')
surf2 = ax2.plot_surface(X, Z, Bz_grid, cmap='plasma')
ax2.set_xlabel('X (m)')
ax2.set_ylabel('Z (m)')
ax2.set_zlabel('Bz (T)')
ax2.set_title('Magnetic Field Bz in X-Z Plane (y = 0.005 m)')
fig.colorbar(surf2, ax=ax2, label='Bz (T)')

plt.tight_layout()
plt.show()
