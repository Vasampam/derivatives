import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# --- Constants ---
mu_0 = 4 * np.pi * 1e-7
Ms = 1e6  # A/m
mu_r = 1.1
eps = 1e-12

# Magnet dimensions (centered at origin)
x_half = 10e-3
y_half = 2e-3
z_half = 1e-3

# Magnet translation positions (sweep along X)
x_positions = np.linspace(-20e-3, 20e-3, 500)

# Observation points (choose one or more)
obs_points = [
    [-1.5e-3, 2e-3, 2.1e-3],
]

# --- Field computation functions ---
def F_func(x, y, z, x_m, y1, y2, z_k):
    R1 = np.sqrt((x - x_m)**2 + (y - y1)**2 + (z - z_k)**2)
    R2 = np.sqrt((x - x_m)**2 + (y - y2)**2 + (z - z_k)**2)
    num = (y - y1) + R1
    den = (y - y2) + R2 + eps
    return num / den

def H_func(x, y, z, x1, x2, y_m, z_k):
    R1 = np.sqrt((x - x1)**2 + (y - y_m)**2 + (z - z_k)**2)
    R2 = np.sqrt((x - x2)**2 + (y - y_m)**2 + (z - z_k)**2)
    num = (x - x1) + R1
    den = (x - x2) + R2 + eps
    return num / den

def G_func(x, y, z, x_n, y_m, z_k):
    return 1.0 / (np.sqrt((x - x_n)**2 + (y - y_m)**2 + (z - z_k)**2) + eps)

def compute_B_field(obs, magnet_center_x):
    x_o, y_o, z_o = obs

    x1, x2 = magnet_center_x - x_half, magnet_center_x + x_half
    y1, y2 = -y_half, y_half
    z1, z2 = -z_half, z_half

    x_m_vals = [x1, x2]
    y_m_vals = [y1, y2]
    z_k_vals = [z1, z2]

    Bx = By = Bz = 0.0

    # Bx
    for k, z_k in enumerate(z_k_vals):
        for m, x_m in enumerate(x_m_vals):
            sign = (-1) ** (k + m)
            F = F_func(x_o, y_o, z_o, x_m, y1, y2, z_k)
            Bx += sign * np.log(F)
    Bx *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    # By
    for k, z_k in enumerate(z_k_vals):
        for m, y_m in enumerate(y_m_vals):
            sign = (-1) ** (k + m)
            H = H_func(x_o, y_o, z_o, x1, x2, y_m, z_k)
            By += sign * np.log(H)
    By *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    # Bz
    for k, z_k in enumerate(z_k_vals):
        for n, x_n in enumerate(x_m_vals):
            for m, y_m in enumerate(y_m_vals):
                sign = (-1) ** (k + n + m)
                g = G_func(x_o, y_o, z_o, x_n, y_m, z_k)
                arctan_arg = ((x_o - x_n) * (y_o - y_m)) / ((z_o - z_k) + eps) * g
                Bz += sign * np.arctan(arctan_arg)
    Bz *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    return Bx, By, Bz

# --- Load ANSYS Maxwell data (optional) ---
try:
    df_maxwell = pd.read_csv("maxwell_Bfields.csv")  # Ensure this file exists in working dir
    x_maxwell = df_maxwell["x_mm"]
    Bx_maxwell = df_maxwell["Bx"] * 1e6  # convert to µT
    By_maxwell = df_maxwell["By"] * 1e6
    Bz_maxwell = df_maxwell["Bz"] * 1e6
    maxwell_loaded = True
except Exception as e:
    print("⚠️ Maxwell data not loaded:", e)
    maxwell_loaded = False

# --- Main loop over observation points ---
for idx, obs_point in enumerate(obs_points):
    Bx_vals, By_vals, Bz_vals, Bmag_vals = [], [], [], []

    for xc in x_positions:
        Bx, By, Bz = compute_B_field(obs_point, xc)
        Bmag = np.sqrt(Bx**2 + By**2 + Bz**2)

        Bx_vals.append(Bx)
        By_vals.append(By)
        Bz_vals.append(Bz)
        Bmag_vals.append(Bmag)

    # Convert to microtesla
    Bx_vals = np.array(Bx_vals) * 1e6
    By_vals = np.array(By_vals) * 1e6
    Bz_vals = np.array(Bz_vals) * 1e6
    Bmag_vals = np.array(Bmag_vals) * 1e6
    x_mm = x_positions * 1e3

    max_idx = np.argmax(Bmag_vals)
    print(f"\nObservation Point #{idx+1}: {np.array(obs_point)*1e3} mm")
    print(f"Max |B| = {Bmag_vals[max_idx]:.3f} µT at x = {x_mm[max_idx]:.3f} mm")
    print(f"  --> Bx = {Bx_vals[max_idx]:.3f} µT")
    print(f"  --> By = {By_vals[max_idx]:.3f} µT")
    print(f"  --> Bz = {Bz_vals[max_idx]:.3f} µT")

    # Plot Bx
    plt.figure(figsize=(10, 4))
    plt.plot(x_mm, Bx_vals, color="r", label="Analytical Bx (µT)")
    if maxwell_loaded:
        plt.plot(x_maxwell, Bx_maxwell, 'r--', label="Maxwell Bx (µT)")
    plt.xlabel("Magnet X Position (mm)")
    plt.ylabel("Bx (µT)")
    plt.title(f"Bx vs Magnet X Position\nObservation Point #{idx+1}")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Plot By
    plt.figure(figsize=(10, 4))
    plt.plot(x_mm, By_vals, color="g", label="Analytical By (µT)")
    if maxwell_loaded:
        plt.plot(x_maxwell, By_maxwell, 'g--', label="Maxwell By (µT)")
    plt.xlabel("Magnet X Position (mm)")
    plt.ylabel("By (µT)")
    plt.title(f"By vs Magnet X Position\nObservation Point #{idx+1}")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Plot Bz
    plt.figure(figsize=(10, 4))
    plt.plot(x_mm, Bz_vals, color="b", label="Analytical Bz (µT)")
    if maxwell_loaded:
        plt.plot(x_maxwell, Bz_maxwell, 'b--', label="Maxwell Bz (µT)")
    plt.xlabel("Magnet X Position (mm)")
    plt.ylabel("Bz (µT)")
    plt.title(f"Bz vs Magnet X Position\nObservation Point #{idx+1}")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Error analysis (optional)
    if maxwell_loaded:
        interp_Bx = np.interp(x_mm, x_maxwell, Bx_maxwell)
        interp_By = np.interp(x_mm, x_maxwell, By_maxwell)
        interp_Bz = np.interp(x_mm, x_maxwell, Bz_maxwell)

        mae_Bx = np.mean(np.abs(Bx_vals - interp_Bx))
        mae_By = np.mean(np.abs(By_vals - interp_By))
        mae_Bz = np.mean(np.abs(Bz_vals - interp_Bz))
        print(f"MAE Bx: {mae_Bx:.2f} µT | MAE By: {mae_By:.2f} µT | MAE Bz: {mae_Bz:.2f} µT")
