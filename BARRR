import numpy as np
import matplotlib.pyplot as plt

# --- Constants ---
mu_0 = 4 * np.pi * 1e-7       # Vacuum permeability (TÂ·m/A)
Ms = 1e6                      # Saturation magnetization (A/m)
mu_r = 1.1                    # Relative permeability
eps = 1e-12                   # Small number to avoid singularities

# --- Magnet dimensions (centered at origin) ---
x_half = 10e-3  # Length = 20 mm
y_half = 2e-3   # Width = 4 mm
z_half = 1e-3   # Height = 2 mm

# --- Observation point sweep along X axis (Maxwell-aligned: from +20 mm to -20 mm) ---
x_positions = np.linspace(20e-3, -20e-3, 500)  # Observation X
y_obs = 2e-3   # Fixed Y = 2 mm (center)
z_obs = 2e-3   # Fixed Z = 2 mm (just above magnet)

# --- Field computation helper functions ---
def F_func(x, y, z, x_m, y1, y2, z_k):
    R1 = np.sqrt((x - x_m)**2 + (y - y1)**2 + (z - z_k)**2)
    R2 = np.sqrt((x - x_m)**2 + (y - y2)**2 + (z - z_k)**2)
    num = (y - y1) + R1
    den = (y - y2) + R2 + eps
    return num / den

def H_func(x, y, z, x1, x2, y_m, z_k):
    R1 = np.sqrt((x - x1)**2 + (y - y_m)**2 + (z - z_k)**2)
    R2 = np.sqrt((x - x2)**2 + (y - y_m)**2 + (z - z_k)**2)
    num = (x - x1) + R1
    den = (x - x2) + R2 + eps
    return num / den

def G_func(x, y, z, x_n, y_m, z_k):
    return 1.0 / (np.sqrt((x - x_n)**2 + (y - y_m)**2 + (z - z_k)**2) + eps)

# --- Magnetic field computation at a point ---
def compute_B_field(obs, magnet_center_x):
    x_o, y_o, z_o = obs

    # Fixed magnet at origin, span its dimensions
    x1, x2 = magnet_center_x - x_half, magnet_center_x + x_half
    y1, y2 = -y_half, y_half
    z1, z2 = -z_half, z_half

    x_m_vals = [x1, x2]
    y_m_vals = [y1, y2]
    z_k_vals = [z1, z2]

    Bx = By = Bz = 0.0

    # Compute Bx
    for k, z_k in enumerate(z_k_vals):
        for m, x_m in enumerate(x_m_vals):
            sign = (-1) ** (k + m)
            F = F_func(x_o, y_o, z_o, x_m, y1, y2, z_k)
            Bx += sign * np.log(F)

    Bx *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    # Compute By
    for k, z_k in enumerate(z_k_vals):
        for m, y_m in enumerate(y_m_vals):
            sign = (-1) ** (k + m)
            H = H_func(x_o, y_o, z_o, x1, x2, y_m, z_k)
            By += sign * np.log(H)

    By *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    # Compute Bz
    for k, z_k in enumerate(z_k_vals):
        for n, x_n in enumerate(x_m_vals):
            for m, y_m in enumerate(y_m_vals):
                sign = (-1) ** (k + n + m)
                g = G_func(x_o, y_o, z_o, x_n, y_m, z_k)
                arctan_arg = ((x_o - x_n) * (y_o - y_m)) / ((z_o - z_k) + eps) * g
                Bz += sign * np.arctan(arctan_arg)

    Bz *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    return Bx, By, Bz

# --- Sweep and compute field values ---
Bx_vals, By_vals, Bz_vals, Bmag_vals = [], [], [], []

for x_obs in x_positions:
    obs_point = [x_obs, y_obs, z_obs]
    Bx, By, Bz = compute_B_field(obs_point, magnet_center_x=0.0)
    Bmag = np.sqrt(Bx**2 + By**2 + Bz**2)

    Bx_vals.append(Bx)
    By_vals.append(By)
    Bz_vals.append(Bz)
    Bmag_vals.append(Bmag)

# Convert to NumPy arrays for plotting
x_mm = x_positions * 1e3  # mm scale

# --- Plot each B component in separate figures ---
components = {
    "Bx (T)": (Bx_vals, "r"),
    "By (T)": (By_vals, "g"),
    "Bz (T)": (Bz_vals, "b")
}

for label, (values, color) in components.items():
    plt.figure(figsize=(8, 5))
    plt.plot(x_mm, values, label=label, color=color)
    plt.xlabel("Observation X Position (mm)")
    plt.ylabel(label)
    plt.title(f"{label} vs Observation X (Maxwell Aligned)")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()
