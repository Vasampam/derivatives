# Constants
mu_0 = 4 * np.pi * 1e-7
Ms = 1e6  # A/m (adjust this for actual magnet)
mu_r = 1.1

eps = 1e-12  # small number to avoid singularities

# Magnet dimensions (centered at origin)
x_half = 10e-3  # 20 mm / 2
y_half = 2e-3   # 4 mm / 2
z_half = 1e-3   # 2 mm / 2

# Magnet translation positions (sweep along X)
x_positions = np.linspace(-20e-3, 20e-3, 500)  # -20 mm to +20 mm

# Define multiple observation points
obs_points = [
    [0.0, 0e-3, -1e-3],   # Directly above center at 5 mm
    [0.0, 0, 2e-3],   # Closer to magnet surface
    [1e-3, 2e-3, 2e-3],  # Offset in y direction
    [2e-3,2e-3,2e-3],
]

def F_func(x, y, z, x_m, y1, y2, z_k):
    R1 = np.sqrt((x - x_m)**2 + (y - y1)**2 + (z - z_k)**2)
    R2 = np.sqrt((x - x_m)**2 + (y - y2)**2 + (z - z_k)**2)
    num = (y - y1) + R1
    den = (y - y2) + R2 + eps
    return num / den

def H_func(x, y, z, x1, x2, y_m, z_k):
    R1 = np.sqrt((x - x1)**2 + (y - y_m)**2 + (z - z_k)**2)
    R2 = np.sqrt((x - x2)**2 + (y - y_m)**2 + (z - z_k)**2)
    num = (x - x1) + R1
    den = (x - x2) + R2 + eps
    return num / den

def G_func(x, y, z, x_n, y_m, z_k):
    return 1.0 / (np.sqrt((x - x_n)**2 + (y - y_m)**2 + (z - z_k)**2) + eps)

def compute_B_field(obs, magnet_center_x):
    x_o, y_o, z_o = obs

    # Translate magnet along x-axis
    x1, x2 = magnet_center_x - x_half, magnet_center_x + x_half
    y1, y2 = -y_half, y_half
    z1, z2 = -z_half, z_half

    x_m_vals = [x1, x2]
    y_m_vals = [y1, y2]
    z_k_vals = [z1, z2]

    Bx = By = Bz = 0.0

    # Bx
    for k, z_k in enumerate(z_k_vals):
        for m, x_m in enumerate(x_m_vals):
            sign = (-1) ** (k + m)
            F = F_func(x_o, y_o, z_o, x_m, y1, y2, z_k)
            Bx += sign * np.log(F)

    Bx *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    # By
    for k, z_k in enumerate(z_k_vals):
        for m, y_m in enumerate(y_m_vals):
            sign = (-1) ** (k + m)
            H = H_func(x_o, y_o, z_o, x1, x2, y_m, z_k)
            By += sign * np.log(H)

    By *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    # Bz
    for k, z_k in enumerate(z_k_vals):
        for n, x_n in enumerate(x_m_vals):
            for m, y_m in enumerate(y_m_vals):
                sign = (-1) ** (k + n + m)
                g = G_func(x_o, y_o, z_o, x_n, y_m, z_k)
                arctan_arg = ((x_o - x_n) * (y_o - y_m)) / ((z_o - z_k) + eps) * g
                Bz += sign * np.arctan(arctan_arg)

    Bz *= (mu_0 * Ms * mu_r) / (4 * np.pi)

    return Bx, By, Bz

# --- Main loop for all observation points ---
for idx, obs_point in enumerate(obs_points):
    Bx_vals, By_vals, Bz_vals, Bmag_vals = [], [], [], []

    for xc in x_positions:
        Bx, By, Bz = compute_B_field(obs_point, xc)
        Bmag = np.sqrt(Bx**2 + By**2 + Bz**2)

        Bx_vals.append(Bx)
        By_vals.append(By)
        Bz_vals.append(Bz)
        Bmag_vals.append(Bmag)

    # Convert to microtesla for plotting
    Bx_vals = np.array(Bx_vals) 
    By_vals = np.array(By_vals) 
    Bz_vals = np.array(Bz_vals) 
    Bmag_vals = np.array(Bmag_vals) 
    x_mm = x_positions * 1e3

    # Print max B info
    max_idx = np.argmax(Bmag_vals)
    print(f"\nObservation Point #{idx+1}: {np.array(obs_point)*1e3} mm")
    print(f"Max |B| = {Bmag_vals[max_idx]:.6f} T at x = {x_mm[max_idx]:.6f} mm")
    print(f"  --> Bx = {Bx_vals[max_idx]:.6f} T")
    print(f"  --> By = {By_vals[max_idx]:.6f} T")
    print(f"  --> Bz = {Bz_vals[max_idx]:.6f} T")

    # Plot
    plt.figure(figsize=(10, 6))
    plt.plot(x_mm, Bx_vals, label="Bx (T)", color="r")
    plt.plot(x_mm, By_vals, label="By (T)", color="g")
    plt.plot(x_mm, Bz_vals, label="Bz (T)", color="b")
    plt.plot(x_mm, Bmag_vals, label="|B| (T)", color="k", linestyle="--")
    plt.title(f"B-Field vs Magnet Translation\nObservation Point #{idx+1}")
    plt.xlabel("Magnet X Position (mm)")
    plt.ylabel("B-field (T)")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()
