import numpy as np
from scipy.integrate import tplquad
import matplotlib.pyplot as plt
import time
from scipy.fft import fft, fftfreq                           # For FFT calculations

# --- 1. Physical Constants and Magnet Parameters (Consistent SI Units) ---
mu_o = 4 * np.pi * 1e-7                                      # Permeability of free space (H/m)
M_s = 4.3 * 10**5                                            # Magnetization (A/m)

# Solid Disc Magnet Geometry (Defining its outer radius and height)
R_magnet_outer = 2.54e-2                                     # Outer radius of the solid disc magnet (meters)
z_magnet_start = -25e-3                                      # Start z-coordinate of the magnet (meters)
z_magnet_end = 25e-3                                         # End z-coordinate of the magnet (meters)

# The common prefactor for all integrals, as r' is now an integration variable.
common_prefactor = (mu_o * M_s) / (4 * np.pi)

# ====================================================================
# Core Helper Function: g(r,phi,z,r',phi',z') - Same for all components
# ====================================================================
def g_func(r_obs, phi_obs, z_obs, r_prime, phi_prime, z_prime):
    """
    Calculates g = 1 / distance, where distance is between observation (r,phi,z)
    and source (r_prime, phi_prime, z_prime).
    """
    d_squared = r_obs**2 + r_prime**2 - 2 * r_obs * r_prime * np.cos(phi_obs - phi_prime) + (z_obs - z_prime)**2
    
    if d_squared < 1e-20:                                    # Handle potential division by zero at very small distances
        return 0.0
    return 1.0 / np.sqrt(d_squared)

# ====================================================================
# Integrand Functions for ALL B components (for SciPy's tplquad)
# ====================================================================
def integrand_Br_scipy_solid(phi_prime, r_prime, z_prime, r_obs, phi_obs, z_obs):
    g_val = g_func(r_obs, phi_obs, z_obs, r_prime, phi_prime, z_prime)
    return np.cos(phi_prime) * (r_obs - r_prime * np.cos(phi_obs - phi_prime)) * (g_val**3) * r_prime

def integrand_Bphi_scipy_solid(phi_prime, r_prime, z_prime, r_obs, phi_obs, z_obs):
    g_val = g_func(r_obs, phi_obs, z_obs, r_prime, phi_prime, z_prime)
    # Corrected integrand for Bphi based on common formulas for M_r magnetization:
    # A common source for Bphi is M_phi or components of M_r with phi dependence
    # Given your previous integrands and bipolar context, we assume the structure is derived correctly.
    # The r_prime**2 is often for M_phi * r_prime_squared. Let's keep it consistent with what you had.
    return np.cos(phi_prime) * np.sin(phi_obs - phi_prime) * (g_val**3) * r_prime**2 

def integrand_Bz_scipy_solid(phi_prime, r_prime, z_prime, r_obs, phi_obs, z_obs):
    g_val = g_func(r_obs, phi_obs, z_obs, r_prime, phi_prime, z_prime)
    return np.cos(phi_prime) * (z_obs - z_prime) * (g_val**3) * r_prime

# ====================================================================
# Function to Calculate ALL B Components at a Single Observation Point (CPU)
# ====================================================================
def calculate_B_field_scipy_solid(r_obs, phi_obs, z_obs):
    phi_prime_lower_limit = lambda r_prime_dummy, z_prime_dummy: 0.0
    # Reverting to 2 * np.pi for a single physical magnet
    phi_prime_upper_limit = lambda r_prime_dummy, z_prime_dummy: 2 * np.pi 
    r_prime_lower_limit = lambda z_prime_dummy: 0.0
    r_prime_upper_limit = lambda z_magnet_dummy: R_magnet_outer
    z_prime_lower_limit = z_magnet_start
    z_prime_upper_limit = z_magnet_end
    args_tuple = (r_obs, phi_obs, z_obs)
    
    # Example: Slightly relaxed tolerances to improve speed, adjust as needed
    tolerances = {'epsabs': 1e-4, 'epsrel': 1e-4} 

    integral_Br, _ = tplquad(integrand_Br_scipy_solid, z_prime_lower_limit,
                             z_prime_upper_limit, r_prime_lower_limit, r_prime_upper_limit,
                             phi_prime_lower_limit, phi_prime_upper_limit, args=args_tuple, **tolerances)
    integral_Bphi, _ = tplquad(integrand_Bphi_scipy_solid, z_prime_lower_limit, 
                               z_prime_upper_limit, r_prime_lower_limit, r_prime_upper_limit,
                               phi_prime_lower_limit, phi_prime_upper_limit, args=args_tuple, **tolerances)
    integral_Bz, _ = tplquad(integrand_Bz_scipy_solid, z_prime_lower_limit,
                             z_prime_upper_limit, r_prime_lower_limit, r_prime_upper_limit,
                             phi_prime_lower_limit, phi_prime_upper_limit, args=args_tuple, **tolerances)

    Br = common_prefactor * integral_Br
    Bphi = common_prefactor * integral_Bphi
    Bz = common_prefactor * integral_Bz
    return Br, Bphi, Bz

# ====================================================================
# Functions for Signal Analysis: Amplitude, THD, SNR (Same as before)
# ====================================================================
def calculate_amplitude(signal):
    return np.max(signal) - np.min(signal)

def calculate_thd(signal):
    N = len(signal)
    if N < 2: return np.nan
    yf = fft(signal)
    magnitudes = 2.0/N * np.abs(yf[1:N//2]) 
    if len(magnitudes) == 0: return np.nan
    fundamental_idx = np.argmax(magnitudes)
    fundamental_power = magnitudes[fundamental_idx]**2
    harmonic_power_sum = np.sum(magnitudes**2) - fundamental_power
    if fundamental_power == 0: return np.nan
    thd = np.sqrt(harmonic_power_sum / fundamental_power)
    return thd

def calculate_snr(signal, noise_level_tesla=0.0):
    if noise_level_tesla > 0:
        noise = np.random.normal(0, noise_level_tesla, len(signal))
        true_signal_power = np.mean(signal**2)
        added_noise_power = np.mean(noise**2)
        if added_noise_power == 0: return np.nan
        snr_linear = true_signal_power / added_noise_power
        snr_db = 10 * np.log10(snr_linear)
        return snr_db
    else:
        return np.nan

# ====================================================================
# Main Execution for Waveform Plot and Analysis (Modified for Volume Exploration)
# ====================================================================

# --- Define Varying Parameters for a "Volume" Plot (Varying R and PHI) ---
fixed_z_obs = 0.0e-3                                         # Fixed axial distance (at magnet center, 0 mm)

# Define multiple radial observation distances to explore the volume
# Start just outside the magnet's radius and go outwards.
# Choose 3-5 distances for a good visual comparison.

r_observation_radii = np.linspace(R_magnet_outer,0.05,10)


#r_observation_radii = np.array([
#    R_magnet_outer * 1.1,                                   # 10% outside the magnet's outer radius
#    R_magnet_outer * 1.5,                                   # 50% outside
#    R_magnet_outer * 2.0,                                   # Twice the magnet's outer radius
#    R_magnet_outer * 3.0                                    # Three times the magnet's outer radius
#])

# For each r_obs, we will still sweep phi
phi_observation_points = np.linspace(0, 10 * np.pi, 20)      # 100 points for one full revolution

# --- Data Storage ---
# Store Br, Bphi, and Bz values for each r_obs and corresponding phi_obs sweep
all_Br_data = {}
all_Bphi_data = {}
all_Bz_data = {}                                             # Keep Bz data as well for completeness if needed later

print(f"\n--- Calculating B-field components for multiple radial distances at z = {fixed_z_obs*1000:.1f} mm ---")

total_start_time = time.time()

for r_obs_val in r_observation_radii:
    print(f"\n--- Calculating for r = {r_obs_val*1000:.1f} mm ---")
    
    # Initialize arrays for the current r_obs_val
    Br_values_current_r = np.zeros_like(phi_observation_points)
    Bphi_values_current_r = np.zeros_like(phi_observation_points)
    Bz_values_current_r = np.zeros_like(phi_observation_points)

    start_time_phi_calc = time.time()
    for i, phi_val in enumerate(phi_observation_points):
        br, bphi, bz = calculate_B_field_scipy_solid(r_obs_val, phi_val, fixed_z_obs)
        Br_values_current_r[i] = br
        Bphi_values_current_r[i] = bphi
        Bz_values_current_r[i] = bz
        
        # Optionally, print each point. This can be very verbose for many r values and phi points.
        print(f"  Phi (deg): {np.degrees(phi_val):<7.2f} | Br: {br*1000:<8.4f} mT | Bphi: {bphi*1000:<8.4f} mT | Bz: {bz*1000:.4f} mT")

    end_time_phi_calc = time.time()
    print(f"--- Calculation for r = {r_obs_val*1000:.1f} mm complete in {end_time_phi_calc - start_time_phi_calc:.2f} seconds.")
    
    # Store the results for the current r_obs_val
    all_Br_data[r_obs_val] = Br_values_current_r
    all_Bphi_data[r_obs_val] = Bphi_values_current_r
    all_Bz_data[r_obs_val] = Bz_values_current_r

total_end_time = time.time()
print(f"\nAll volume calculations complete in {total_end_time - total_start_time:.2f} seconds.")

# --- Plotting Br and Bphi for all varying phi angles at different r_obs ---

plt.figure(figsize=(14, 10))                                 # Larger figure to accommodate two plots

# Plot for B_phi
plt.subplot(2, 1, 1)                                         # 2 rows, 1 column, 1st plot
for r_obs_val, bphi_values in all_Bphi_data.items():
    plt.plot(np.degrees(phi_observation_points), bphi_values * 1000, 
             label=f'r = {r_obs_val*1000:.1f} mm')

plt.title(f'B_phi vs. Azimuthal Angle at different Radial Distances (z={fixed_z_obs*1000:.1f} mm)')
plt.xlabel('Azimuthal Angle, phi (degrees)')
plt.ylabel('B_phi (mT)')
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title='Observation Radius')

# Plot for B_r
plt.subplot(2, 1, 2)                                         # 2 rows, 1 column, 2nd plot
for r_obs_val, br_values in all_Br_data.items():
    plt.plot(np.degrees(phi_observation_points), br_values * 1000, 
             label=f'r = {r_obs_val*1000:.1f} mm')

plt.title(f'B_r vs. Azimuthal Angle at different Radial Distances (z={fixed_z_obs*1000:.1f} mm)')
plt.xlabel('Azimuthal Angle, phi (degrees)')
plt.ylabel('B_r (mT)')
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title='Observation Radius')

plt.tight_layout()                                           # Adjusts subplot params for a tight layout
plt.show()

# --- Optional: Signal Analysis for selected r_obs (e.g., the closest one) ---
# You can perform analysis for each r_obs if you like, but it would create a lot of output.
# Let's just do it for the closest observation radius as an example.
print("\n--- Signal Analysis for closest r_obs ---")
closest_r_obs = r_observation_radii[0]
print(f"Analyzing signal at r = {closest_r_obs*1000:.1f} mm:")

# Get data for the closest r_obs
bphi_closest = all_Bphi_data[closest_r_obs]
br_closest = all_Br_data[closest_r_obs]

print("\n  B_phi:")
amplitude_bphi_closest = calculate_amplitude(bphi_closest)
print(f"    Peak-to-Peak Amplitude: {amplitude_bphi_closest*1000:.2f} mT")
thd_bphi_closest = calculate_thd(bphi_closest)
print(f"    THD: {thd_bphi_closest:.4f}")
# SNR calculation for B_phi (with artificial noise)
noise_standard_deviation = 1e-6 
np.random.seed(0) 
snr_bphi_closest = calculate_snr(bphi_closest, noise_standard_deviation)
print(f"    SNR (with {noise_standard_deviation*1e6:.1f} uT noise): {snr_bphi_closest:.2f} dB")


print("\n  B_r:")
amplitude_br_closest = calculate_amplitude(br_closest)
print(f"    Peak-to-Peak Amplitude: {amplitude_br_closest*1000:.2f} mT")
thd_br_closest = calculate_thd(br_closest)
print(f"    THD: {thd_br_closest:.4f}")

# You can extend this for all r_obs_val and/or z_obs_val if needed for your parametric study.


